<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Customer API on Customer-Api</title>
    <link>/</link>
    <description>Recent content in Customer API on Customer-Api</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authentication</title>
      <link>/endpoints/auth.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/endpoints/auth.html</guid>
      <description>The authentication endpoints are used to authenticate against the API. If you have been given an access-token you can use that instead.
Endpoints  /user/login /user/logout  /user/login     User authentication     URL /user/login   Method POST   Content type application/json   Body/Data {&amp;quot;username&amp;quot;: &amp;quot;your username&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;your password&amp;quot;}   Success response HTTP Status 200
Content-Type: application/json
Content: {&amp;quot;display_name&amp;quot;:&amp;quot;your name&amp;quot;}   Error response HTTP Status 401: Invalid credentials   Sample call curl https://gui.</description>
    </item>
    
    <item>
      <title>Data Bundle Permissions</title>
      <link>/endpoints/data-bundles.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/endpoints/data-bundles.html</guid>
      <description>The data bundles endpoint is used to fetch data bundles, referred as bundle_name in the API documentation, which you have access to.
It will also describe if there are any restrictions in time or regions that you have access to.
To get more details about each bundle_name read about it here
Endpoints  /user/data-bundles  user/data-bundles     Data Bundles Permissions     URL /user/data-bundles   Method GET   Success response HTTP Status 200</description>
    </item>
    
    <item>
      <title>Tile Concept Explained</title>
      <link>/general/tile-documentation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/tile-documentation.html</guid>
      <description>What is a Tile? A common technique to display maps on a computer is to divide the map into a grid (XY-plane) of rectangles. Each rectangle in this grid is called a map tile and together the grid becomes a tile grid.
This enables a map application to only load visible tiles instead of the entire map. How the grid is constructed is determined by the map creator. To refer to a specific tile it is common to either use the XY-planes respective X and Y coordinate or to have a tile-id that combines the plane coordinate into a single number.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/general/authentication.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/authentication.html</guid>
      <description>Authentication Overview There are two different ways to authenticate against the API endpoints. The first way is a normal login process. This process is to be used if you have been given a username and password.
The second way is to use an API Access-Token. This token is generated by NIRA and not the end user, so unless you have been given one, use the login authentication process.
Login Authentication Process By calling the login endpoint with your username and password you will be given an AUTH_SESSION cookie in return.</description>
    </item>
    
    <item>
      <title>Here-Tile Offset</title>
      <link>/endpoints/here-tile-offset.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/endpoints/here-tile-offset.html</guid>
      <description>The structure of Here-Tile offset uses the concept of offset and the structure of data is similar to Here-Tile sublink. This means that in order to identify the location of a data point, the data is correlated with a road id and an offset from that road&amp;rsquo;s start position. To calculate the segment (if both start and end offset are used) or the point, calculate the position of the offset by following the road geometry.</description>
    </item>
    
    <item>
      <title>Data Bundles</title>
      <link>/general/data-bundles.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/data-bundles.html</guid>
      <description>Data Bundles Below you will find a description about the different data bundles which are available in the NIRA API. The names of these different data bundles are referred to as bundle_name in the API endpoint documentation. Note that you might not have permission to fetch data from all data bundles listed here.
road-segment-aggregation-2 The road-segment-aggregation-2 bundle contains layers with friction information. For this bundle, the available timestamp is in 10 minute increments and the data is produced with a delay of around 10 minutes.</description>
    </item>
    
    <item>
      <title>Here-Tile Sublink</title>
      <link>/endpoints/here-tile-sublink.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/endpoints/here-tile-sublink.html</guid>
      <description>The Here-Tile sublink API divides the road network into sublinks. A sublink is a road (called link in this case) that has been split into one or more subsegments. The maximum length of a sublink depends on the data-bundle. The length of a sublink decides the highest resolution the data will be supplied at. Each road is divided into sublinks of equal length.
This API also separates the data from the underlying road network geometry.</description>
    </item>
    
    <item>
      <title>Google Protocol Buffer Explained</title>
      <link>/general/protobuf-documentation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/protobuf-documentation.html</guid>
      <description>Google Protocol Buffer (Proto) You can read what Protocol Buffers (Proto, Protobuf) are at Google&amp;rsquo;s documentation. NIRA uses them as the return response from the HERE-tile APIs (it is also used for Mapbox Vector tile) to package the data in a compact format. The output from these APIs will be in binary format which you will need a declaration of the .proto format used to decode.
NIRA supplies different .</description>
    </item>
    
    <item>
      <title>Mapbox Vector Tile</title>
      <link>/endpoints/mapbox-vector-tile.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/endpoints/mapbox-vector-tile.html</guid>
      <description>The Mapbox vector tile API is an easy-to-use format as it is supported by many rendering libraries. It contains both the geometry and the data. This API is suitable for graphical interfaces but not for data scraping as it always downloads the geometry of the road segments.
Endpoints  /tiles/vector/example /tiles/vector/aggregated /obstacles/vector/obstacle-aggregation  /tiles/vector/example     Mapbox vector tile example     URL /tiles/vector/example/:level/:column/:row   Method GET   Description This vector tile layer displays a layer that requires no authentication or permission to use.</description>
    </item>
    
    <item>
      <title>Test the API</title>
      <link>/general/api-testing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/api-testing.html</guid>
      <description>Overview NIRA provides an OpenAPI 3.0 specification file that can be used with your favorite testing program. The tool we will use is Postman.
Additionally, you will need a tool for decoding the protobuf response files. We will use Protoc.
Test with Postman  Download API definition here . Download Postman. Import the API definition into Postman.  During import click on &amp;ldquo;Show advanced settings&amp;rdquo; and change the following:  &amp;ldquo;Naming requests&amp;rdquo; to URL.</description>
    </item>
    
    <item>
      <title>Code Examples</title>
      <link>/general/code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/general/code.html</guid>
      <description>Code Examples Below are some code examples to do specific operations related to the API.
Computing Tile Id Scala val LonRange = 360 val LatRange = 180 def getTileId(lat: Double, lon: Double, zoomLevel: Int): Long = { // find x,y tile indexes  val x: Int = scala.math .floor((lon + LonRange / 2) / getDegreesPerTile(zoomLevel)) .toInt val y: Int = scala.math .floor((lat + LatRange / 2) / getDegreesPerTile(zoomLevel)) .toInt interleaveAndGetTileId(zoomLevel, x, y) } private def getDegreesPerTile(zoomLevel: Int): Double = LonRange / scala.</description>
    </item>
    
    <item>
      <title></title>
      <link>/_footer.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/_footer.html</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
